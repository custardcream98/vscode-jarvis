import * as vscode from "vscode";
import path from "path";
import { getFileContent } from "./data/file";
import {
  getAnswerQuestionPrompt,
  getFileTreeSummeryPrompt,
  getProjectShortExplanationPrompt,
  getReadmeSummeryPrompt,
} from "./completion/prompt";
import {
  getChatCompletion,
  getChatCompletionWithFunction,
} from "./completion/chat";
import OpenAI from "openai";
import { getProjectFileTree } from "./data/fileTree";

const EXTENSION_NAME = "jarvis";

const getReadmeSummery = async (
  openai: OpenAI,
  targetDirectory: string
) => {
  const readme = getFileContent(
    path.resolve(targetDirectory, "./README.md")
  );

  if (!readme) {
    return "";
  }

  const readmeSummaryPrompt = getReadmeSummeryPrompt({
    readme,
  });

  const { summary: readmeSummary } =
    await getChatCompletion<{
      summary: string;
    }>(openai, readmeSummaryPrompt);

  return readmeSummary;
};

const getFilesToIgnore = (targetDirectory: string) => {
  const gitignore = getFileContent(
    path.resolve(targetDirectory, "./.gitignore")
  );

  const filesToIgnore = gitignore.split("\n");

  return filesToIgnore;
};

const getFileTreeSummary = async (
  openai: OpenAI,
  fileTree: string
) => {
  const fileTreeSummaryPrompt = getFileTreeSummeryPrompt({
    fileTree,
  });

  const { fileDirectories: fileTreeSummary } =
    await getChatCompletion<{
      fileDirectories: string[];
    }>(openai, fileTreeSummaryPrompt);

  return fileTreeSummary;
};

const getProjectShortExplanation = async (
  openai: OpenAI,
  readmeSummary: string,
  fileTreeSummary: string
) => {
  const projectExplanationPrompt =
    getProjectShortExplanationPrompt({
      summarizedFileTree: fileTreeSummary,
      summarizedReadme: readmeSummary,
    });

  const { explanation: projectExplanation } =
    await getChatCompletion<{
      explanation: string;
    }>(openai, projectExplanationPrompt);

  return projectExplanation;
};

const setupJarvis = async (
  context: vscode.ExtensionContext,
  currentWorkspaceRoot: string,
  openAiApiKey: string
) => {
  vscode.window.showInformationMessage(
    "Jarvis: Setting up"
  );

  const openai = new OpenAI({
    apiKey: openAiApiKey,
  });

  const TARGET_DIRECTORY = currentWorkspaceRoot;

  const readmeSummary = await getReadmeSummery(
    openai,
    TARGET_DIRECTORY
  );

  const filesToIgnore = getFilesToIgnore(TARGET_DIRECTORY);

  const fileTree = getProjectFileTree(
    TARGET_DIRECTORY,
    filesToIgnore
  );

  const fileTreeSummary = await getFileTreeSummary(
    openai,
    fileTree
  );

  const projectShortExplanation =
    await getProjectShortExplanation(
      openai,
      readmeSummary,
      fileTreeSummary.join("\n")
    );

  vscode.window.showInformationMessage(
    "Jarvis: " +
      projectShortExplanation +
      " (Generated by Jarvis)\nJarvis is Ready To Answer Questions.",
    "Make a Question"
  );

  const askToJarvis = async () => {
    const question = await vscode.window.showInputBox({
      prompt: "Ask a Question",
      placeHolder: "What is the purpose of this project?",
      ignoreFocusOut: true,
    });

    if (!question) {
      return;
    }

    vscode.window.showInformationMessage(
      "Jarvis is thinking..."
    );

    const questionPrompt = getAnswerQuestionPrompt({
      question,
      projectShortExplanation,
      fileTree,
    });

    const { answer } = await getChatCompletionWithFunction<{
      answer: string;
    }>(openai, questionPrompt, TARGET_DIRECTORY);

    vscode.window.showInformationMessage(
      "Jarvis: " + answer
    );
  };

  let askToJarvisCommand = vscode.commands.registerCommand(
    EXTENSION_NAME + ".askToJarvis",
    askToJarvis
  );

  context.subscriptions.push(askToJarvisCommand);
};

export async function activate(
  context: vscode.ExtensionContext
) {
  let restartServer = vscode.commands.registerCommand(
    EXTENSION_NAME + ".restartServer",
    () => {
      vscode.commands.executeCommand(
        "workbench.action.reloadWindow"
      );
    }
  );

  context.subscriptions.push(restartServer);

  const openAiApiKey = vscode.workspace
    .getConfiguration(EXTENSION_NAME)
    .get("Open_AI_Api_Key");

  if (!openAiApiKey || typeof openAiApiKey !== "string") {
    vscode.window.showErrorMessage(
      "Jarvis: OpenAI API Key is not set. Please set it in settings."
    );

    return;
  }

  const currentWorkspaceRoot =
    vscode.workspace.workspaceFolders?.[0].uri.fsPath;

  if (!currentWorkspaceRoot) {
    vscode.window.showErrorMessage(
      "Jarvis: No workspace is open."
    );

    return;
  }

  await setupJarvis(
    context,
    currentWorkspaceRoot,
    openAiApiKey
  );
}

export function deactivate() {}
